codetasty.revision.2.0
{"ts":1526417404,"restoring":false,"user_id":7359,"patch":[{"diffs":[[1,"<?php\r\n/*\r\nFile: include.php\r\n\r\nDefines classes for the database system.\r\n\r\nCreator: Joshua Anderson <https://andersmmg.ga/>\r\nLast Changed: Joshua Anderson <02/26/2018>\r\n*/\r\n\r\n/*\r\n~Class Information~\r\n\r\nName: Info\r\nStores error information during a function. Handles output and information about errors. Formats errors as simple HTML.\r\n*/\r\nclass Info {\r\n\t\r\n\tvar $error = null;\r\n\tvar $title = null;\r\n\tvar $has_error = false;\r\n\t\r\n\t/*\r\n\tUpdates error message to current error.\r\n\t\r\n\tInfo->set_error($error)\r\n\t$message: The error message\r\n\t*/\r\n\tpublic function set_error($message) {\r\n\t\t\r\n\t\t$this->error = $message;\r\n\t\t$this->has_error = true;\r\n\t\t\r\n\t\treturn true;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tUpdates error message title to current error title.\r\n\t\r\n\tInfo->set_title($title)\r\n\t$title: The title of the error message.\r\n\t*/\r\n\tpublic function set_title($titles) {\r\n\t\t\r\n\t\t$this->title = $titles;\r\n\t\t\r\n\t\treturn true;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tUpdates error message and title to current error.\r\n\t\r\n\tInfo->set_all($title, $error)\r\n\t$title: The title of the error message.\r\n\t$message: The error message\r\n\t*/\r\n\tpublic function set_all($titles, $message) {\r\n\t\t\r\n\t\t$this->title = $titles;\r\n\t\t$this->error = $message;\r\n\t\t$this->has_error = true;\r\n\t\t\r\n\t\treturn true;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tRemoves all error information, so there is no longer an error stored\r\n\t\r\n\tInfo->remove_error()\r\n\t*/\r\n\tpublic function remove_error() {\r\n\t\t\r\n\t\t$this->error = null;\r\n\t\t$this->title = null;\r\n\t\t$this->has_error = false;\r\n\t\t\r\n\t\treturn true;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tOutputs current error in plaintext.\r\n\t\r\n\tInfo->text_error()\r\n\t*/\r\n\tpublic function text_error() {\r\n\t\t\r\n\t\tif($this->title != null) {\r\n\t\t\treturn $this->title.\": \".$this->error;\r\n\t\t}else{\r\n\t\t\treturn $this->error;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tOutputs current error in formatted HTML.\r\n\t\r\n\tInfo->html_error()\r\n\t*/\r\n\tpublic function html_error() {\r\n\t\t\r\n\t\tif($this->title != null) {\r\n\t\t\treturn \"<b>\".$this->title.\":</b> \".$this->error;\r\n\t\t}else{\r\n\t\t\treturn \"<b>Error:</b> \".$this->error;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n/*\r\n~Class Information~\r\n\r\nName: Manager\r\nManagement class for the database system and accounts.\r\n*/\r\nclass Manager {\r\n\t\r\n  private $_conn;\r\n\t\r\n\t/*\r\n\tManager class construction.\r\n\t\r\n\tnew Manager();\r\n\t*/\r\n\tpublic function __construct() {\r\n\t\t\r\n\t\t// set up the session\r\n\t\tsession_start();\r\n\t\t\r\n\t\t// server should keep session data for AT LEAST 1 hour\r\n\t\tini_set('session.gc_maxlifetime', 172800);\r\n\t\t\r\n\t\t// each client should remember their session id for EXACTLY 1 hour\r\n\t\tsession_set_cookie_params(172800);\r\n\t\t\r\n\t\t// Connect to the database\r\n\t\t$this->_conn = new mysqli(\"localhost\", \"chscyberweb\", openssl_decrypt(\"3e+ypcazRdsWFRa1B1TYWQ==\",\"AES128\",\"thecodething\",0,\"4659865325647854\"), \"chs\");\r\n\t\t\r\n\t\tif($this->_conn->connect_error){ // Error handling\r\n\t\t\tdie($this->_conn->connect_error);\r\n\t\t}\r\n\t\t\r\n\t\t$u = $this->get_user();\r\n\t\tif($u) {\r\n\t\t\tif($u['enabled'] != 1 && !$GLOBALS['onpage']) {\r\n\t\t\t\theader(\"location: /db/inactive.php\");\r\n\t\t\t\tdie(\"<script>window.location.href='/db/inactive.php';</script>Your account is not active.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tManager class destruction.\r\n\t\r\n\tExecuted at the end of PHP or on destruction call.\r\n\t*/\r\n\tfunction __destruct() {\r\n\t\t\r\n\t\t// End database connection\r\n\t\t$this->_conn->close();\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tQueries the database.\r\n\t\r\n\tManager->database_query($query)\r\n\t$query: String containing SQL query\r\n\t*/\r\n\tpublic function database_query($query) {\r\n\t\t// SQL query\r\n\t\t$stmt = $this->_conn->query($query);\r\n\t\tif($stmt->error){ // Error handling\r\n\t\t\treturn $stmt->error;\r\n\t\t}\r\n\t\treturn $stmt->get_result(); // Return MySQL result\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tQueries the database and returns an array.\r\n\t\r\n\tManager->database_query_array($query)\r\n\t$query: String containing SQL query\r\n\t*/\r\n\tpublic function database_query_array($query) {\r\n\t\t// SQL query\r\n\t\t$stmt = $this->_conn->query($query);\r\n\t\tif($stmt->error){ // Error handling\r\n\t\t\treturn $stmt->error;\r\n\t\t}\r\n\t\treturn $stmt->get_result()->fetch_array(); // Return array of result\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tReturns database connection.\r\n\t\r\n\tManager->database()\r\n\t*/\r\n\tpublic function database() {\r\n\t\t// Return database connection\r\n\t\treturn $this->_conn;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tReturns array with all user data.\r\n\t\r\n\tManager->get_user()\r\n\t*/\r\n\tpublic function get_user() {\r\n\t\t// If logged in\r\n\t\tif(isset($_SESSION['username'])){\r\n\t\t\t// Prepare query\r\n\t\t\t$stmt = $this->_conn->prepare(\"SELECT * FROM users WHERE username = ?\");\r\n\t\t\t$stmt->bind_param('s', $_SESSION['username']); // Bind parameters\r\n\t\t\t$stmt->execute(); // Execute!\r\n\t\t\tif($stmt->error){ // Error handling\r\n\t\t\t\treturn $stmt->error;\r\n\t\t\t}\r\n\t\t\treturn $stmt->get_result()->fetch_array();\r\n\t\t}else{ // Return false for not logged in\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tRequires a user to be logged in\r\n\t\r\n\tManager->require_login()\r\n\t*/\r\n\tpublic function require_login() {\r\n\t\t\r\n\t\tif($this->get_user()) {\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\theader(\"location: /db/login.php\");\r\n\t\t\tdie(\"<script>window.location.href='/db/login.php';</script>You need to log in.\");\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tRequires a user to have a certain permission\r\n\t\r\n\tManager->require_perm($name)\r\n\t$name: String containing the permission required\r\n\t*/\r\n\tpublic function require_perm($name) {\r\n\t\t\r\n\t\tif($this->get_user() && $this->get_user()[$name] == 1) {\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\theader(\"location: /db/noperm.php\");\r\n\t\t\tdie(\"<script>window.location.href='/db/noperm.php';</script>You do not have permission to do this.\");\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tChecks a certain permission for current to see if it is enabled\r\n\t\r\n\tManager->check_perm($name)\r\n\t$name: String containing the permission to check\r\n\t*/\r\n\tpublic function check_perm($name) {\r\n\t\t\r\n\t\tif($this->get_user() && $this->get_user()[$name] == 1) {\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tAdds an activity to the database.\r\n\t\r\n\tManager->activity($content[, $type, $which]);\r\n\t$content: String with information about what was done\r\n\t$type: String stating the object type, if applicable\r\n\t$which: Integer stating which of the specified object type was used, if applicable\r\n\t*/\r\n\tpublic function activity($content, $type=\"\", $which=-1, $del = false) {\r\n\t\t// Get user info\r\n\t\t$user = $this->get_user()['id'];\r\n\t\t// Get current server time\r\n\t\t$when = time();\r\n\t\t// Delete action? SQL friendly integer\r\n\t\tif($del) {\r\n\t\t\t$del = 1;\r\n\t\t}else{\r\n\t\t\t$del = 0;\r\n\t\t}\r\n\t\t// Prepare, bind, and execution of query\r\n\t\t$stmt = $this->_conn->prepare(\"INSERT INTO `activities` (`user`, `when`, `content`, `type`, `which`, `delete`) VALUES (?, ?, ?, ?, ?, ?)\");\r\n\t\t$stmt->bind_param(\"iissii\", $user, $when, $content, $type, $which, $del);\r\n\t\t$stmt->execute();\r\n\t\t// Error handling\r\n\t\tif($this->_conn->error) {\r\n\t\t\techo $this->_conn->error;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tReturns if a user is logged in.\r\n\t\r\n\tManager->logged_in()\r\n\t*/\r\n\tpublic function logged_in() {\r\n\t\t// If logged in\r\n\t\tif(isset($_SESSION['username'])) {\r\n\t\t\treturn true; // Return true for logged in\r\n\t\t}else{\r\n\t\t\treturn false; // Return false for not logged in\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tReturns the value of a certain setting.\r\n\t\r\n\tManager->get_setting($key)\r\n\t$key: String containing the setting key to find\r\n\t*/\r\n\tpublic function get_setting($key) {\r\n\t\t// If logged in\r\n\t\tif($this->get_user()){\r\n\t\t\t// Prepare query\r\n\t\t\t$stmt = $this->_conn->prepare(\"SELECT * FROM `settings` WHERE user = ? AND key = ?\");\r\n\t\t\t$stmt->bind_param('is', $this->get_user()['id'], $key); // Bind parameters\r\n\t\t\t$stmt->execute(); // Execute!\r\n\t\t\tif($stmt->error){ // Error handling\r\n\t\t\t\treturn $stmt->error;\r\n\t\t\t}\r\n\t\t\tif($stmt->num_rows > 0){ // Check if setting is set\r\n\t\t\t\treturn $stmt->get_result()->fetch_array()['value'];\r\n\t\t\t}else{ // Return false for empty setting\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}else{ // Return false for not logged in\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t// TODO: Add a function for changing setting values\r\n\t\r\n\t/*\r\n\tLogs the current user in using supplied credentials.\r\n\t\r\n\tManager->login($user)\r\n\t$user: Array with username and password, or the $_POST variable from a form submission containing the same\r\n\t*/\r\n\tpublic function login($user) {\r\n\t\t// Init error reporting\r\n\t\t$info = new Info();\r\n\t\t// Check if both username and password are specified\r\n\t\tif (!empty($user['username']) && !empty($user['password'])) {\r\n\t\t\t// Set variables to be easier to use going forward\r\n\t\t\t$username = $user['username'];\r\n\t\t\t$password = $user['password'];\r\n\t\t\t// Set title for future errors\r\n\t\t\t$info->set_title(\"Login Failed\");\r\n\t\t\t// Prepare MySQL query and check for errors\r\n\t\t\tif (!($stmt = $this->_conn->prepare(\"SELECT * FROM users WHERE username = ?\"))) {\r\n\t\t\t\t$info->set_error(\"Prepare failed: (\" . $stmt->errno . \")\" . $stmt->error . \"\");\r\n\t\t\t}\r\n\t\t\t// Pind parameters to query\r\n\t\t\tif (!$stmt->bind_param('s', $username)) {\r\n\t\t\t\t$info->set_error(\"Bind failed: (\" . $stmt->errno . \")\" . $stmt->error . \"\");\r\n\t\t\t}\r\n\t\t\t// Execute!\r\n\t\t\tif (!$stmt->execute()) {\r\n\t\t\t\t$info->set_error(\"Execute failed: (\" . $stmt->errno . \")\" . $stmt->error . \"\");\r\n\t\t\t}\r\n\t\t\t// Check for errors and return them if they exist, \r\n\t\t\t// therefore stopping the code from running further\r\n\t\t\tif($info->has_error) {\r\n\t\t\t\treturn $info;\r\n\t\t\t}\r\n\t\t\t// Get user information\r\n\t\t\t$userdata = $stmt->get_result();\r\n\t\t\t// Check if a user was found or not\r\n\t\t\tif ($userdata->num_rows <= 0) {\r\n\t\t\t\t// Error\r\n\t\t\t\t$info->set_error(\"User does not exist.\");\r\n\t\t\t} else {\r\n\t\t\t\t// Get all user info\r\n\t\t\t\t$row = $userdata->fetch_array(MYSQLI_ASSOC);\r\n\t\t\t\t// Are these needed?\r\n\t\t\t\t$stmt->bind_result($username, $password);\r\n\t\t\t\t$stmt->store_result();\r\n\t\t\t\t// Check password\r\n\t\t\t\tif (password_verify($password, $row['password']) || $row['passreset'] == 1) {\r\n\t\t\t\t\t// Log user in\r\n\t\t\t\t\t$_SESSION['username'] = $row['username'];\r\n\t\t\t\t\t// Add to activity log\r\n\t\t\t\t\t$this->activity(\"Logged in\");\r\n\t\t\t\t\t// Finished\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\texit();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Error\r\n\t\t\t\t\t$info->set_error(\"Password is incorrect.\");\r\n\t\t\t\t\t// $passin is used in login page, keeping it here for reference\r\n\t\t\t\t\t$passin = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t// Finished!\r\n\t\t\t$stmt->close();\r\n\t\t}else{\r\n\t\t\t// Oh no\r\n\t\t\t$info->set_all(\"Login Failed\", \"Please specify a username and password.\");\r\n\t\t}\r\n\t\t\r\n\t\treturn $info;\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\tLogs the current user out.\r\n\t\r\n\tManager->logout()\r\n\t*/\r\n\tpublic function logout() {\r\n\t\t// Add to activity log\r\n\t\t$this->activity(\"Logged out\");\r\n\t\t// Remove username from session\r\n\t\tunset($_SESSION['username']);\r\n\t\t// Return true for success, because it won't fail\r\n\t\treturn true;\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n?>"]],"start1":0,"start2":0,"length1":0,"length2":10471}],"length":10471}
{"ts":1526417470,"restoring":false,"user_id":7359,"patch":[{"diffs":[[0,"\r\n\t\t\t}\r\n"],[1,"\t\t\t\r\n\t\t\tif($u['enabled'] == 1 && !$GLOBALS['onpage']) {\r\n\t\t\t\theader(\"location: /db/\");\r\n\t\t\t\tdie(\"<script>window.location.href='/db/';</script>Your account is now active.\");\r\n\t\t\t}\r\n"],[0,"\t\t}\r\n\t\t\r"]],"start1":3028,"start2":3028,"length1":16,"length2":196}],"length":10651}
{"ts":1526417494,"restoring":false,"user_id":7359,"patch":[{"diffs":[[0,"d'] == 1 && "],[-1,"!"],[0,"$GLOBALS['on"]],"start1":3057,"start2":3057,"length1":25,"length2":24}],"length":10650}